#ifndef REMOTE_PROTECT
#define REMOTE_PROTECT
#include "Struct.h"
#include "NtApiDef.h"
#include "lazy_importer.hpp"
#include <iostream>

namespace remote_protect
{
	namespace shell_code
	{
		/*
			NO_INLINE auto protect_thread(uint32_t process_id) -> bool
			{
			    bool is_find_process = TRUE; 
			    bool is_thread_hide = NULL;
			    UINT number_freez = NULL;
			    ULONG ret_lenght = NULL;  
			    NTSTATUS nt_status = STATUS_UNSUCCESSFUL;
			    HANDLE thread_handle = NULL;
			    HANDLE process_handle = NULL;
			    PVOID buffer = NULL;
			    PVOID kernel_base = NULL;
			    PVOID ntdll_base = NULL;  
			    PVOID nt_open_thread = NULL;
			    PVOID nt_open_process = NULL;
			    PVOID nt_close = NULL; 
			    PVOID virtual_alloce = NULL;
			    PVOID virtual_free = NULL;
			    PVOID nt_query_system_information = NULL;
			    PVOID nt_get_context = NULL;
			    PVOID nt_set_context = NULL;
			    PVOID nt_set_informathion_thread = NULL;
			    PVOID nt_query_informathion_thread = NULL;
			    PVOID nt_terminate_process = NULL;
			    PVOID nt_terminate_thread = NULL;
			    CONTEXT ctx;
			    OBJECT_ATTRIBUTES ObjectAttributes = { sizeof(OBJECT_ATTRIBUTES) };
			    PSYSTEM_PROCESS_INFORMATION process_info = NULL;
			     
			    if (process_id)
			    {
			        if(!kernel_base)
			            kernel_base = api_wrapper::get_module_address(FNV(L"KERNEL32.DLL"));
			        if (!ntdll_base)
			            ntdll_base = api_wrapper::get_module_address(FNV(L"ntdll.dll"));//api_wrapper::get_module_address(fnv::hash_constexpr(L"ntdll.dll"));
			  
			        if (ntdll_base && kernel_base)
			        {
			
			            if (!nt_get_context || !nt_set_context || !nt_set_informathion_thread || !virtual_alloce || !virtual_free || !nt_close || !nt_open_thread || !nt_query_system_information)
			            {
			                nt_close = api_wrapper::get_proc_address(ntdll_base, FNV("NtClose"));
			                nt_open_thread = api_wrapper::get_proc_address(ntdll_base, FNV("NtOpenThread"));
			                nt_open_process = api_wrapper::get_proc_address(ntdll_base, FNV("NtOpenProcess"));
			                nt_query_system_information = api_wrapper::get_proc_address(ntdll_base, FNV("NtQuerySystemInformation"));
			                virtual_alloce = api_wrapper::get_proc_address(kernel_base, FNV("VirtualAlloc"));
			                virtual_free = api_wrapper::get_proc_address(kernel_base, FNV("VirtualFree"));
			                nt_get_context = api_wrapper::get_proc_address(ntdll_base, FNV("NtGetContextThread"));
			                nt_set_context = api_wrapper::get_proc_address(ntdll_base, FNV("NtSetContextThread"));
			                nt_set_informathion_thread = api_wrapper::get_proc_address(ntdll_base, FNV("NtSetInformationThread"));
			                nt_query_informathion_thread = api_wrapper::get_proc_address(ntdll_base, FNV("NtQueryInformationThread"));
			                nt_terminate_process  = api_wrapper::get_proc_address(ntdll_base, FNV("NtTerminateProcess"));
			                nt_terminate_thread = api_wrapper::get_proc_address(ntdll_base, FNV("NtTerminateThread"));
			            }
			
			            //Check get correct address api
			            if (nt_get_context && nt_set_context && nt_set_informathion_thread && nt_close && nt_open_thread && virtual_alloce && virtual_free && nt_query_system_information )
			            {
			                //Start loop,while process live
			                while (is_find_process)
			                {
			                    is_find_process = FALSE;
			                    nt_status = reinterpret_cast<decltype(&NtQuerySystemInformation)>(nt_query_system_information)(SystemProcessInformation, &ret_lenght, ret_lenght, &ret_lenght);
			
			                    while (nt_status == STATUS_INFO_LENGTH_MISMATCH)
			                    {
			                        if (nullptr != buffer)
			                            reinterpret_cast<decltype(&VirtualFree)>(virtual_free)(buffer, NULL, MEM_RELEASE);
			                        
			                        buffer = reinterpret_cast<decltype(&VirtualAlloc)>(virtual_alloce)(NULL, ret_lenght, MEM_COMMIT, PAGE_READWRITE);
			                        
			                        nt_status = reinterpret_cast<decltype(&NtQuerySystemInformation)>(nt_query_system_information)(SystemProcessInformation, buffer, ret_lenght, &ret_lenght);
			                    }
			
			                    if (!NT_SUCCESS(nt_status))
			                    {
			                        reinterpret_cast<decltype(&VirtualFree)>(virtual_free)(buffer, NULL, MEM_RELEASE);
			                        return NULL;
			                    } 
			                    process_info = reinterpret_cast<PSYSTEM_PROCESS_INFORMATION>(buffer);
			                    while (process_info->NextEntryOffset) 
			                    {
			                        //Find protect process
			                        if (reinterpret_cast<uint32_t>(process_info->UniqueProcessId) == process_id)
			                        {  
			                            is_find_process = TRUE;
			                            for (ULONG i = NULL; i < process_info->NumberOfThreads; i++)
			                            { 
										//if Debugger Suspend or attach,WaitReason set Suspended (https://github.com/HighSchoolSoftwareClub/Windows-Research-Kernel-WRK-/blob/26b524b2d0f18de703018e16ec5377889afcf4ab/WRK-v1.2/base/ntos/dbgk/dbgkobj.c#L1114)
			                                if (process_info->Threads[i].WaitReason == Suspended)
			                                {
			                                    number_freez++;//maybe create suspended thread
			                                    if (number_freez >= 2 && nt_terminate_process && nt_open_process)
			                                    {
			                                        if (NT_SUCCESS(reinterpret_cast<decltype(&NtOpenProcess)>(nt_open_process)(&process_handle, PROCESS_TERMINATE, &ObjectAttributes, &process_info->Threads[i].ClientId)))
			                                        { 
			                                            reinterpret_cast<decltype(&NtTerminateProcess)>(nt_terminate_process)(thread_handle, NULL);
			                                            if (thread_handle)
			                                                reinterpret_cast<decltype(&NtClose)>(nt_close)(thread_handle);
			                                        } 
			                                    }
			                                } 
											//It's bypass PsGetCurrentProcessId/IoGetCurrentProcess
			                                if (NT_SUCCESS(reinterpret_cast<decltype(&NtOpenThread)>(nt_open_thread)(&thread_handle, THREAD_GET_CONTEXT | THREAD_SET_CONTEXT | THREAD_SET_INFORMATION | THREAD_QUERY_INFORMATION | THREAD_TERMINATE, &ObjectAttributes, &process_info->Threads[i].ClientId)))
			                                { 
			                                    api_wrapper::memset(&ctx, NULL, sizeof(ctx));
			                                    ctx.ContextFlags = CONTEXT_DEBUG_REGISTERS;
			                                    if (NT_SUCCESS(reinterpret_cast<decltype(&NtGetContextThread)>(nt_get_context)(thread_handle, &ctx)))
			                                    {
			                                        if (ctx.Dr0 || ctx.Dr1 || ctx.Dr2 || ctx.Dr3)
			                                        { 
			                                            ctx.Dr0 = NULL;
			                                            ctx.Dr1 = NULL;
			                                            ctx.Dr2 = NULL;
			                                            ctx.Dr3 = NULL;
			                                            ctx.Dr7 = (1 << 0) | (1 << 2) | (1 << 4) | (1 << 6);//Enable all access HWBP
			                                            reinterpret_cast<decltype(&NtSetContextThread)>(nt_set_context)(thread_handle, &ctx);
			                                        }
			                                    }
			                                    
			                                    if (NT_SUCCESS(reinterpret_cast<decltype(&NtSetInformationThread)>(nt_set_informathion_thread)(thread_handle, ThreadHideFromDebugger, NULL, NULL)))
			                                    { 
			                                        if (nt_query_informathion_thread && nt_terminate_thread)//NtQueryInformationThread - Windows xp+
			                                        {
			                                            if(NT_SUCCESS(reinterpret_cast<decltype(&NtQueryInformationThread)>(nt_query_informathion_thread)(thread_handle, ThreadHideFromDebugger, &is_thread_hide, sizeof(is_thread_hide), NULL)))
			                                            {
			                                                if (!is_thread_hide)//Bad hook
			                                                {
			                                                    reinterpret_cast<decltype(&NtTerminateThread)>(nt_terminate_thread)(thread_handle, NULL);
			                                                }
			                                            }
			                                        }
			                                    }
			                                    
			                                    if (thread_handle)
			                                       reinterpret_cast<decltype(&NtClose)>(nt_close)(thread_handle);
			                                }
			                            }
			                        }
			                        process_info = (PSYSTEM_PROCESS_INFORMATION)((LPBYTE)process_info + process_info->NextEntryOffset); // Calculate the address of the next entry.
			                    }
			                    number_freez = NULL;
			                    reinterpret_cast<decltype(&VirtualFree)>(virtual_free)(buffer, NULL, MEM_RELEASE);
			                    ret_lenght = NULL;
			                    process_info = NULL;
			                    buffer = NULL; 
			                } 
			            }
			        }
			    }
			    return NULL;
			}
		*/
		//Sexy shell_code
		uint8_t protect_process_64[] =
		{
		0x89, 0x4C, 0x24, 0x08, 0x55, 0x53, 0x56, 0x57, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57,
		0x48, 0x8D, 0xAC, 0x24, 0x68, 0xFB, 0xFF, 0xFF, 0x48, 0x81, 0xEC, 0x98, 0x05, 0x00, 0x00, 0x8B,
		0xC1, 0xC6, 0x85, 0xF0, 0x04, 0x00, 0x00, 0x00, 0x33, 0xC9, 0xC7, 0x85, 0xF8, 0x04, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x48, 0xC7, 0x44, 0x24, 0x50, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x57, 0xC0,
		0x48, 0xC7, 0x45, 0x88, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x45, 0x90, 0x30, 0x00, 0x00, 0x00, 0x48,
		0x89, 0x4D, 0xB8, 0x0F, 0x11, 0x45, 0x98, 0x0F, 0x11, 0x45, 0xA8, 0x85, 0xC0, 0x0F, 0x84, 0xBE,
		0x0D, 0x00, 0x00, 0x65, 0x48, 0x8B, 0x04, 0x25, 0x60, 0x00, 0x00, 0x00, 0x33, 0xDB, 0x49, 0xBD,
		0xBC, 0x22, 0x22, 0x84, 0xE4, 0x9C, 0xF2, 0xCB, 0x49, 0xBF, 0x4A, 0x01, 0x00, 0x00, 0x00, 0x01,
		0x00, 0x00, 0x4C, 0x8B, 0x58, 0x18, 0x49, 0x83, 0xC3, 0x20, 0x4D, 0x8B, 0x0B, 0x4D, 0x3B, 0xCB,
		0x74, 0x45, 0x48, 0xBF, 0xD0, 0x0D, 0xF0, 0x34, 0x00, 0x61, 0xF6, 0xF8, 0x0F, 0x1F, 0x40, 0x00,
		0x4D, 0x8B, 0x41, 0x50, 0x4D, 0x85, 0xC0, 0x74, 0x20, 0x49, 0x8B, 0xD5, 0x0F, 0x1F, 0x40, 0x00,
		0x41, 0x0F, 0xB7, 0x08, 0x4D, 0x8D, 0x40, 0x02, 0x48, 0x33, 0xD1, 0x49, 0x0F, 0xAF, 0xD7, 0x66,
		0x85, 0xC9, 0x75, 0xEC, 0x48, 0x3B, 0xD7, 0x74, 0x0A, 0x4D, 0x8B, 0x09, 0x4D, 0x3B, 0xCB, 0x75,
		0xCF, 0xEB, 0x04, 0x49, 0x8D, 0x59, 0xF0, 0x65, 0x48, 0x8B, 0x04, 0x25, 0x60, 0x00, 0x00, 0x00,
		0x4C, 0x8B, 0x73, 0x30, 0x33, 0xDB, 0x4C, 0x8B, 0x58, 0x18, 0x49, 0x83, 0xC3, 0x20, 0x4D, 0x8B,
		0x0B, 0x4D, 0x3B, 0xCB, 0x74, 0x41, 0x48, 0xBF, 0x50, 0xE1, 0x5F, 0xB4, 0x9D, 0x9D, 0xCC, 0xEE,
		0x4D, 0x8B, 0x41, 0x50, 0x4D, 0x85, 0xC0, 0x74, 0x20, 0x49, 0x8B, 0xD5, 0x0F, 0x1F, 0x40, 0x00,
		0x41, 0x0F, 0xB7, 0x08, 0x4D, 0x8D, 0x40, 0x02, 0x48, 0x33, 0xD1, 0x49, 0x0F, 0xAF, 0xD7, 0x66,
		0x85, 0xC9, 0x75, 0xEC, 0x48, 0x3B, 0xD7, 0x74, 0x0A, 0x4D, 0x8B, 0x09, 0x4D, 0x3B, 0xCB, 0x75,
		0xCF, 0xEB, 0x04, 0x49, 0x8D, 0x59, 0xF0, 0x48, 0x8B, 0x53, 0x30, 0x48, 0x89, 0x95, 0xE8, 0x04,
		0x00, 0x00, 0x48, 0x85, 0xD2, 0x0F, 0x84, 0xD6, 0x0C, 0x00, 0x00, 0x4D, 0x85, 0xF6, 0x0F, 0x84,
		0xCD, 0x0C, 0x00, 0x00, 0xB9, 0x4D, 0x5A, 0x00, 0x00, 0x66, 0x39, 0x0A, 0x0F, 0x84, 0x07, 0x01,
		0x00, 0x00, 0x45, 0x33, 0xE4, 0x45, 0x33, 0xED, 0x45, 0x33, 0xFF, 0x4C, 0x89, 0x64, 0x24, 0x30,
		0x4C, 0x89, 0x7C, 0x24, 0x48, 0x4C, 0x89, 0x6C, 0x24, 0x38, 0x33, 0xC9, 0xB8, 0x4D, 0x5A, 0x00,
		0x00, 0x48, 0x89, 0x4C, 0x24, 0x40, 0x66, 0x41, 0x39, 0x06, 0x0F, 0x85, 0x9A, 0x04, 0x00, 0x00,
		0x49, 0x63, 0x46, 0x3C, 0x42, 0x81, 0x3C, 0x30, 0x50, 0x45, 0x00, 0x00, 0x0F, 0x85, 0x88, 0x04,
		0x00, 0x00, 0x42, 0x8B, 0x84, 0x30, 0x88, 0x00, 0x00, 0x00, 0x49, 0x03, 0xC6, 0x0F, 0x84, 0x77,
		0x04, 0x00, 0x00, 0x44, 0x8B, 0x50, 0x20, 0x4D, 0x03, 0xD6, 0x0F, 0x84, 0xAE, 0x03, 0x00, 0x00,
		0x8B, 0x78, 0x24, 0x49, 0x03, 0xFE, 0x0F, 0x84, 0xA2, 0x03, 0x00, 0x00, 0x8B, 0x70, 0x1C, 0x49,
		0x03, 0xF6, 0x0F, 0x84, 0x96, 0x03, 0x00, 0x00, 0x8B, 0x58, 0x14, 0x45, 0x33, 0xDB, 0x85, 0xDB,
		0x74, 0x5D, 0x49, 0xBF, 0xB4, 0xBE, 0x23, 0xD5, 0xEE, 0x87, 0xEC, 0x54, 0x0F, 0x1F, 0x40, 0x00,
		0x45, 0x8B, 0x0A, 0x48, 0xBA, 0x4A, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x4D, 0x03, 0xCE,
		0x49, 0xB8, 0xBC, 0x22, 0x22, 0x84, 0xE4, 0x9C, 0xF2, 0xCB, 0x66, 0x0F, 0x1F, 0x44, 0x00, 0x00,
		0x49, 0x0F, 0xBE, 0x09, 0x4D, 0x8D, 0x49, 0x01, 0x4C, 0x33, 0xC1, 0x4C, 0x0F, 0xAF, 0xC2, 0x84,
		0xC9, 0x75, 0xED, 0x48, 0x8B, 0x95, 0xE8, 0x04, 0x00, 0x00, 0x4D, 0x3B, 0xC7, 0x0F, 0x84, 0x25,
		0x03, 0x00, 0x00, 0x41, 0xFF, 0xC3, 0x49, 0x83, 0xC2, 0x04, 0x44, 0x3B, 0xDB, 0x72, 0xB1, 0x48,
		0xC7, 0x44, 0x24, 0x58, 0x00, 0x00, 0x00, 0x00, 0x49, 0x63, 0x46, 0x3C, 0x42, 0x8B, 0x8C, 0x30,
		0x88, 0x00, 0x00, 0x00, 0x49, 0x03, 0xCE, 0x44, 0x8B, 0x51, 0x20, 0x8B, 0x59, 0x24, 0x4D, 0x03,
		0xD6, 0x49, 0x03, 0xDE, 0xE9, 0x36, 0x03, 0x00, 0x00, 0x48, 0x63, 0x42, 0x3C, 0x81, 0x3C, 0x10,
		0x50, 0x45, 0x00, 0x00, 0x0F, 0x85, 0xE8, 0xFE, 0xFF, 0xFF, 0x8B, 0x84, 0x10, 0x88, 0x00, 0x00,
		0x00, 0x48, 0x03, 0xC2, 0x0F, 0x84, 0xD8, 0xFE, 0xFF, 0xFF, 0x44, 0x8B, 0x50, 0x20, 0x4C, 0x03,
		0xD2, 0x0F, 0x84, 0x90, 0x00, 0x00, 0x00, 0x8B, 0x78, 0x24, 0x48, 0x03, 0xFA, 0x0F, 0x84, 0x84,
		0x00, 0x00, 0x00, 0x8B, 0x70, 0x1C, 0x48, 0x03, 0xF2, 0x0F, 0x84, 0x78, 0x00, 0x00, 0x00, 0x8B,
		0x58, 0x14, 0x45, 0x33, 0xDB, 0x85, 0xDB, 0x74, 0x3B, 0x49, 0xBC, 0xBC, 0xE8, 0xE7, 0x94, 0x84,
		0x68, 0x4D, 0x2D, 0x45, 0x8B, 0x0A, 0x4D, 0x8B, 0xC5, 0x4C, 0x03, 0xCA, 0x0F, 0x1F, 0x40, 0x00,
		0x49, 0x0F, 0xBE, 0x09, 0x4D, 0x8D, 0x49, 0x01, 0x4C, 0x33, 0xC1, 0x4D, 0x0F, 0xAF, 0xC7, 0x84,
		0xC9, 0x75, 0xED, 0x4D, 0x3B, 0xC4, 0x74, 0x31, 0x41, 0xFF, 0xC3, 0x49, 0x83, 0xC2, 0x04, 0x44,
		0x3B, 0xDB, 0x72, 0xCF, 0x45, 0x33, 0xE4, 0x48, 0x63, 0x42, 0x3C, 0x4C, 0x89, 0x64, 0x24, 0x30,
		0x8B, 0x8C, 0x10, 0x88, 0x00, 0x00, 0x00, 0x48, 0x03, 0xCA, 0x44, 0x8B, 0x51, 0x20, 0x8B, 0x59,
		0x24, 0x4C, 0x03, 0xD2, 0x48, 0x03, 0xDA, 0xEB, 0x3D, 0x42, 0x0F, 0xB7, 0x0C, 0x5F, 0x44, 0x8B,
		0x24, 0x8E, 0x4C, 0x03, 0xE2, 0xEB, 0xD0, 0x48, 0x63, 0x42, 0x3C, 0x45, 0x33, 0xE4, 0x4C, 0x89,
		0x64, 0x24, 0x30, 0x8B, 0x8C, 0x10, 0x88, 0x00, 0x00, 0x00, 0x48, 0x03, 0xCA, 0x44, 0x8B, 0x51,
		0x20, 0x4C, 0x03, 0xD2, 0x0F, 0x84, 0x9D, 0x00, 0x00, 0x00, 0x8B, 0x59, 0x24, 0x48, 0x03, 0xDA,
		0x0F, 0x84, 0x91, 0x00, 0x00, 0x00, 0x8B, 0x71, 0x1C, 0x48, 0x03, 0xF2, 0x0F, 0x84, 0x85, 0x00,
		0x00, 0x00, 0x8B, 0x79, 0x14, 0x45, 0x33, 0xDB, 0x85, 0xFF, 0x74, 0x48, 0x49, 0xBD, 0xE8, 0x1E,
		0x53, 0x29, 0x26, 0xFD, 0xB3, 0xD6, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x45, 0x8B, 0x0A, 0x49, 0xB8, 0xBC, 0x22, 0x22, 0x84, 0xE4, 0x9C, 0xF2, 0xCB, 0x4C, 0x03, 0xCA,
		0x49, 0x0F, 0xBE, 0x09, 0x4D, 0x8D, 0x49, 0x01, 0x4C, 0x33, 0xC1, 0x4D, 0x0F, 0xAF, 0xC7, 0x84,
		0xC9, 0x75, 0xED, 0x4D, 0x3B, 0xC5, 0x74, 0x31, 0x41, 0xFF, 0xC3, 0x49, 0x83, 0xC2, 0x04, 0x44,
		0x3B, 0xDF, 0x72, 0xCC, 0x45, 0x33, 0xED, 0x48, 0x63, 0x42, 0x3C, 0x4C, 0x89, 0x6C, 0x24, 0x38,
		0x8B, 0x8C, 0x10, 0x88, 0x00, 0x00, 0x00, 0x48, 0x03, 0xCA, 0x44, 0x8B, 0x51, 0x20, 0x8B, 0x59,
		0x24, 0x4C, 0x03, 0xD2, 0x48, 0x03, 0xDA, 0xEB, 0x3D, 0x42, 0x0F, 0xB7, 0x0C, 0x5B, 0x44, 0x8B,
		0x2C, 0x8E, 0x4C, 0x03, 0xEA, 0xEB, 0xD0, 0x48, 0x63, 0x42, 0x3C, 0x45, 0x33, 0xED, 0x4C, 0x89,
		0x6C, 0x24, 0x38, 0x8B, 0x8C, 0x10, 0x88, 0x00, 0x00, 0x00, 0x48, 0x03, 0xCA, 0x44, 0x8B, 0x51,
		0x20, 0x4C, 0x03, 0xD2, 0x0F, 0x84, 0x97, 0x00, 0x00, 0x00, 0x8B, 0x59, 0x24, 0x48, 0x03, 0xDA,
		0x0F, 0x84, 0x8B, 0x00, 0x00, 0x00, 0x8B, 0x71, 0x1C, 0x48, 0x03, 0xF2, 0x0F, 0x84, 0x7F, 0x00,
		0x00, 0x00, 0x8B, 0x79, 0x14, 0x45, 0x33, 0xDB, 0x85, 0xFF, 0x74, 0x42, 0x0F, 0x1F, 0x40, 0x00,
		0x45, 0x8B, 0x0A, 0x49, 0xB8, 0xBC, 0x22, 0x22, 0x84, 0xE4, 0x9C, 0xF2, 0xCB, 0x4C, 0x03, 0xCA,
		0x49, 0x0F, 0xBE, 0x09, 0x4D, 0x8D, 0x49, 0x01, 0x4C, 0x33, 0xC1, 0x4D, 0x0F, 0xAF, 0xC7, 0x84,
		0xC9, 0x75, 0xED, 0x48, 0xB8, 0xE4, 0xB1, 0x88, 0xB5, 0xDB, 0x0D, 0xE1, 0xE5, 0x4C, 0x3B, 0xC0,
		0x74, 0x31, 0x41, 0xFF, 0xC3, 0x49, 0x83, 0xC2, 0x04, 0x44, 0x3B, 0xDF, 0x72, 0xC2, 0x45, 0x33,
		0xFF, 0x48, 0x63, 0x42, 0x3C, 0x4C, 0x89, 0x7C, 0x24, 0x48, 0x8B, 0x8C, 0x10, 0x88, 0x00, 0x00,
		0x00, 0x48, 0x03, 0xCA, 0x44, 0x8B, 0x51, 0x20, 0x8B, 0x59, 0x24, 0x4C, 0x03, 0xD2, 0x48, 0x03,
		0xDA, 0xEB, 0x3D, 0x42, 0x0F, 0xB7, 0x0C, 0x5B, 0x44, 0x8B, 0x3C, 0x8E, 0x4C, 0x03, 0xFA, 0xEB,
		0xD0, 0x48, 0x63, 0x42, 0x3C, 0x45, 0x33, 0xFF, 0x4C, 0x89, 0x7C, 0x24, 0x48, 0x8B, 0x8C, 0x10,
		0x88, 0x00, 0x00, 0x00, 0x48, 0x03, 0xCA, 0x44, 0x8B, 0x51, 0x20, 0x4C, 0x03, 0xD2, 0x0F, 0x84,
		0xB6, 0xFC, 0xFF, 0xFF, 0x8B, 0x59, 0x24, 0x48, 0x03, 0xDA, 0x0F, 0x84, 0xAA, 0xFC, 0xFF, 0xFF,
		0x8B, 0x71, 0x1C, 0x48, 0x03, 0xF2, 0x0F, 0x84, 0x9E, 0xFC, 0xFF, 0xFF, 0x8B, 0x79, 0x14, 0x45,
		0x33, 0xDB, 0x85, 0xFF, 0x0F, 0x84, 0x90, 0xFC, 0xFF, 0xFF, 0x66, 0x0F, 0x1F, 0x44, 0x00, 0x00,
		0x45, 0x8B, 0x0A, 0x49, 0xB8, 0xBC, 0x22, 0x22, 0x84, 0xE4, 0x9C, 0xF2, 0xCB, 0x4C, 0x03, 0xCA,
		0x49, 0xBC, 0x4A, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x66, 0x0F, 0x1F, 0x44, 0x00, 0x00,
		0x49, 0x0F, 0xBE, 0x09, 0x4D, 0x8D, 0x49, 0x01, 0x4C, 0x33, 0xC1, 0x4D, 0x0F, 0xAF, 0xC4, 0x84,
		0xC9, 0x75, 0xED, 0x4C, 0x8B, 0x64, 0x24, 0x30, 0x48, 0xB8, 0x30, 0x82, 0x0E, 0x0B, 0x9D, 0x6E,
		0x90, 0xE1, 0x4C, 0x3B, 0xC0, 0x74, 0x11, 0x41, 0xFF, 0xC3, 0x49, 0x83, 0xC2, 0x04, 0x44, 0x3B,
		0xDF, 0x72, 0xAD, 0xE9, 0x32, 0xFC, 0xFF, 0xFF, 0x42, 0x0F, 0xB7, 0x0C, 0x5B, 0x8B, 0x0C, 0x8E,
		0x48, 0x03, 0xCA, 0xE9, 0x24, 0xFC, 0xFF, 0xFF, 0x42, 0x0F, 0xB7, 0x0C, 0x5F, 0x44, 0x8B, 0x04,
		0x8E, 0x4D, 0x03, 0xC6, 0x4C, 0x89, 0x44, 0x24, 0x58, 0xE9, 0xDA, 0xFC, 0xFF, 0xFF, 0x49, 0x63,
		0x46, 0x3C, 0x48, 0xC7, 0x44, 0x24, 0x58, 0x00, 0x00, 0x00, 0x00, 0x42, 0x8B, 0x8C, 0x30, 0x88,
		0x00, 0x00, 0x00, 0x49, 0x03, 0xCE, 0x44, 0x8B, 0x51, 0x20, 0x4D, 0x03, 0xD6, 0x0F, 0x84, 0xB4,
		0x00, 0x00, 0x00, 0x8B, 0x59, 0x24, 0x49, 0x03, 0xDE, 0x0F, 0x84, 0xA8, 0x00, 0x00, 0x00, 0x8B,
		0x71, 0x1C, 0x49, 0x03, 0xF6, 0x0F, 0x84, 0x9C, 0x00, 0x00, 0x00, 0x8B, 0x79, 0x14, 0x45, 0x33,
		0xDB, 0x85, 0xFF, 0x0F, 0x84, 0x8E, 0x00, 0x00, 0x00, 0x49, 0xBF, 0x1C, 0x22, 0xCF, 0x19, 0xB8,
		0x1C, 0x36, 0x9E, 0x0F, 0x1F, 0x40, 0x00, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x45, 0x8B, 0x0A, 0x48, 0xBA, 0x4A, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x4D, 0x03, 0xCE,
		0x49, 0xB8, 0xBC, 0x22, 0x22, 0x84, 0xE4, 0x9C, 0xF2, 0xCB, 0x66, 0x0F, 0x1F, 0x44, 0x00, 0x00,
		0x49, 0x0F, 0xBE, 0x09, 0x4D, 0x8D, 0x49, 0x01, 0x4C, 0x33, 0xC1, 0x4C, 0x0F, 0xAF, 0xC2, 0x84,
		0xC9, 0x75, 0xED, 0x48, 0x8B, 0x95, 0xE8, 0x04, 0x00, 0x00, 0x4D, 0x3B, 0xC7, 0x74, 0x0E, 0x41,
		0xFF, 0xC3, 0x49, 0x83, 0xC2, 0x04, 0x44, 0x3B, 0xDF, 0x72, 0xB5, 0xEB, 0x2A, 0x42, 0x0F, 0xB7,
		0x0C, 0x5B, 0x8B, 0x04, 0x8E, 0x49, 0x03, 0xC6, 0xEB, 0x1F, 0x4C, 0x89, 0x64, 0x24, 0x30, 0x4C,
		0x89, 0x6C, 0x24, 0x38, 0x4C, 0x89, 0x7C, 0x24, 0x48, 0x48, 0x89, 0x4C, 0x24, 0x40, 0x48, 0xC7,
		0x44, 0x24, 0x58, 0x00, 0x00, 0x00, 0x00, 0x33, 0xC0, 0x48, 0x89, 0x44, 0x24, 0x68, 0xB8, 0x4D,
		0x5A, 0x00, 0x00, 0x66, 0x39, 0x02, 0x0F, 0x85, 0xC5, 0x07, 0x00, 0x00, 0x48, 0x63, 0x42, 0x3C,
		0x81, 0x3C, 0x10, 0x50, 0x45, 0x00, 0x00, 0x0F, 0x85, 0xB4, 0x07, 0x00, 0x00, 0x8B, 0x84, 0x10,
		0x88, 0x00, 0x00, 0x00, 0x48, 0x03, 0xC2, 0x0F, 0x84, 0xA4, 0x07, 0x00, 0x00, 0x44, 0x8B, 0x50,
		0x20, 0x4C, 0x03, 0xD2, 0x0F, 0x84, 0xBA, 0x00, 0x00, 0x00, 0x8B, 0x78, 0x24, 0x48, 0x03, 0xFA,
		0x48, 0x89, 0xBD, 0xE8, 0x04, 0x00, 0x00, 0x0F, 0x84, 0xA7, 0x00, 0x00, 0x00, 0x8B, 0x70, 0x1C,
		0x48, 0x03, 0xF2, 0x0F, 0x84, 0x9B, 0x00, 0x00, 0x00, 0x8B, 0x58, 0x14, 0x45, 0x33, 0xDB, 0x85,
		0xDB, 0x74, 0x58, 0x49, 0xBE, 0xE8, 0xDA, 0x46, 0xEB, 0xE3, 0x15, 0xA5, 0x37, 0x0F, 0x1F, 0x00,
		0x45, 0x8B, 0x0A, 0x48, 0xBF, 0x4A, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x4C, 0x03, 0xCA,
		0x49, 0xB8, 0xBC, 0x22, 0x22, 0x84, 0xE4, 0x9C, 0xF2, 0xCB, 0x66, 0x0F, 0x1F, 0x44, 0x00, 0x00,
		0x49, 0x0F, 0xBE, 0x09, 0x4D, 0x8D, 0x49, 0x01, 0x4C, 0x33, 0xC1, 0x4C, 0x0F, 0xAF, 0xC7, 0x84,
		0xC9, 0x75, 0xED, 0x48, 0x8B, 0xBD, 0xE8, 0x04, 0x00, 0x00, 0x4D, 0x3B, 0xC6, 0x74, 0x32, 0x41,
		0xFF, 0xC3, 0x49, 0x83, 0xC2, 0x04, 0x44, 0x3B, 0xDB, 0x72, 0xB5, 0x48, 0xC7, 0x44, 0x24, 0x70,
		0x00, 0x00, 0x00, 0x00, 0x48, 0x63, 0x42, 0x3C, 0x8B, 0x8C, 0x10, 0x88, 0x00, 0x00, 0x00, 0x48,
		0x03, 0xCA, 0x44, 0x8B, 0x51, 0x20, 0x8B, 0x59, 0x24, 0x4C, 0x03, 0xD2, 0x48, 0x03, 0xDA, 0xEB,
		0x43, 0x42, 0x0F, 0xB7, 0x0C, 0x5F, 0x44, 0x8B, 0x04, 0x8E, 0x4C, 0x03, 0xC2, 0x4C, 0x89, 0x44,
		0x24, 0x70, 0xEB, 0xD0, 0x48, 0x63, 0x42, 0x3C, 0x48, 0xC7, 0x44, 0x24, 0x70, 0x00, 0x00, 0x00,
		0x00, 0x8B, 0x8C, 0x10, 0x88, 0x00, 0x00, 0x00, 0x48, 0x03, 0xCA, 0x44, 0x8B, 0x51, 0x20, 0x4C,
		0x03, 0xD2, 0x0F, 0x84, 0xB6, 0x00, 0x00, 0x00, 0x8B, 0x59, 0x24, 0x48, 0x03, 0xDA, 0x0F, 0x84,
		0xAA, 0x00, 0x00, 0x00, 0x8B, 0x71, 0x1C, 0x48, 0x03, 0xF2, 0x48, 0x89, 0xB5, 0xE8, 0x04, 0x00,
		0x00, 0x0F, 0x84, 0x97, 0x00, 0x00, 0x00, 0x8B, 0x79, 0x14, 0x45, 0x33, 0xDB, 0x85, 0xFF, 0x74,
		0x5A, 0x49, 0xBE, 0xE8, 0xDA, 0xBE, 0x45, 0x6B, 0x7A, 0x95, 0xC9, 0x0F, 0x1F, 0x44, 0x00, 0x00,
		0x45, 0x8B, 0x0A, 0x48, 0xBE, 0x4A, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x4C, 0x03, 0xCA,
		0x49, 0xB8, 0xBC, 0x22, 0x22, 0x84, 0xE4, 0x9C, 0xF2, 0xCB, 0x66, 0x0F, 0x1F, 0x44, 0x00, 0x00,
		0x49, 0x0F, 0xBE, 0x09, 0x4D, 0x8D, 0x49, 0x01, 0x4C, 0x33, 0xC1, 0x4C, 0x0F, 0xAF, 0xC6, 0x84,
		0xC9, 0x75, 0xED, 0x48, 0x8B, 0xB5, 0xE8, 0x04, 0x00, 0x00, 0x4D, 0x3B, 0xC6, 0x74, 0x31, 0x41,
		0xFF, 0xC3, 0x49, 0x83, 0xC2, 0x04, 0x44, 0x3B, 0xDF, 0x72, 0xB5, 0x45, 0x33, 0xF6, 0x48, 0x63,
		0x42, 0x3C, 0x4C, 0x89, 0x74, 0x24, 0x60, 0x8B, 0x8C, 0x10, 0x88, 0x00, 0x00, 0x00, 0x48, 0x03,
		0xCA, 0x44, 0x8B, 0x51, 0x20, 0x8B, 0x59, 0x24, 0x4C, 0x03, 0xD2, 0x48, 0x03, 0xDA, 0xEB, 0x3D,
		0x42, 0x0F, 0xB7, 0x0C, 0x5B, 0x44, 0x8B, 0x34, 0x8E, 0x4C, 0x03, 0xF2, 0xEB, 0xD0, 0x48, 0x63,
		0x42, 0x3C, 0x45, 0x33, 0xF6, 0x4C, 0x89, 0x74, 0x24, 0x60, 0x8B, 0x8C, 0x10, 0x88, 0x00, 0x00,
		0x00, 0x48, 0x03, 0xCA, 0x44, 0x8B, 0x51, 0x20, 0x4C, 0x03, 0xD2, 0x0F, 0x84, 0xB1, 0x00, 0x00,
		0x00, 0x8B, 0x59, 0x24, 0x48, 0x03, 0xDA, 0x0F, 0x84, 0xA5, 0x00, 0x00, 0x00, 0x8B, 0x71, 0x1C,
		0x48, 0x03, 0xF2, 0x0F, 0x84, 0x99, 0x00, 0x00, 0x00, 0x8B, 0x79, 0x14, 0x45, 0x33, 0xDB, 0x85,
		0xFF, 0x74, 0x56, 0x49, 0xBF, 0xE8, 0x66, 0x8B, 0xC4, 0x19, 0x83, 0x5E, 0xE7, 0x0F, 0x1F, 0x00,
		0x45, 0x8B, 0x0A, 0x49, 0xB8, 0xBC, 0x22, 0x22, 0x84, 0xE4, 0x9C, 0xF2, 0xCB, 0x4C, 0x03, 0xCA,
		0x49, 0xBE, 0x4A, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x66, 0x0F, 0x1F, 0x44, 0x00, 0x00,
		0x49, 0x0F, 0xBE, 0x09, 0x4D, 0x8D, 0x49, 0x01, 0x4C, 0x33, 0xC1, 0x4D, 0x0F, 0xAF, 0xC6, 0x84,
		0xC9, 0x75, 0xED, 0x4C, 0x8B, 0x74, 0x24, 0x60, 0x4D, 0x3B, 0xC7, 0x74, 0x32, 0x41, 0xFF, 0xC3,
		0x49, 0x83, 0xC2, 0x04, 0x44, 0x3B, 0xDF, 0x72, 0xB7, 0x48, 0xC7, 0x44, 0x24, 0x78, 0x00, 0x00,
		0x00, 0x00, 0x48, 0x63, 0x42, 0x3C, 0x8B, 0x8C, 0x10, 0x88, 0x00, 0x00, 0x00, 0x48, 0x03, 0xCA,
		0x44, 0x8B, 0x51, 0x20, 0x8B, 0x59, 0x24, 0x4C, 0x03, 0xD2, 0x48, 0x03, 0xDA, 0xEB, 0x43, 0x42,
		0x0F, 0xB7, 0x0C, 0x5B, 0x44, 0x8B, 0x04, 0x8E, 0x4C, 0x03, 0xC2, 0x4C, 0x89, 0x44, 0x24, 0x78,
		0xEB, 0xD0, 0x48, 0x63, 0x42, 0x3C, 0x48, 0xC7, 0x44, 0x24, 0x78, 0x00, 0x00, 0x00, 0x00, 0x8B,
		0x8C, 0x10, 0x88, 0x00, 0x00, 0x00, 0x48, 0x03, 0xCA, 0x44, 0x8B, 0x51, 0x20, 0x4C, 0x03, 0xD2,
		0x0F, 0x84, 0xB1, 0x00, 0x00, 0x00, 0x8B, 0x59, 0x24, 0x48, 0x03, 0xDA, 0x0F, 0x84, 0xA5, 0x00,
		0x00, 0x00, 0x8B, 0x71, 0x1C, 0x48, 0x03, 0xF2, 0x0F, 0x84, 0x99, 0x00, 0x00, 0x00, 0x8B, 0x79,
		0x14, 0x45, 0x33, 0xDB, 0x85, 0xFF, 0x74, 0x61, 0x49, 0xBF, 0xE8, 0x66, 0x53, 0x3D, 0x9A, 0x34,
		0x1E, 0xB9, 0x0F, 0x1F, 0x40, 0x00, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x45, 0x8B, 0x0A, 0x49, 0xB8, 0xBC, 0x22, 0x22, 0x84, 0xE4, 0x9C, 0xF2, 0xCB, 0x4C, 0x03, 0xCA,
		0x49, 0xBE, 0x4A, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x66, 0x0F, 0x1F, 0x44, 0x00, 0x00,
		0x49, 0x0F, 0xBE, 0x09, 0x4D, 0x8D, 0x49, 0x01, 0x4C, 0x33, 0xC1, 0x4D, 0x0F, 0xAF, 0xC6, 0x84,
		0xC9, 0x75, 0xED, 0x4C, 0x8B, 0x74, 0x24, 0x60, 0x4D, 0x3B, 0xC7, 0x74, 0x2C, 0x41, 0xFF, 0xC3,
		0x49, 0x83, 0xC2, 0x04, 0x44, 0x3B, 0xDF, 0x72, 0xB7, 0x45, 0x33, 0xED, 0x48, 0x63, 0x42, 0x3C,
		0x8B, 0x8C, 0x10, 0x88, 0x00, 0x00, 0x00, 0x48, 0x03, 0xCA, 0x44, 0x8B, 0x51, 0x20, 0x8B, 0x59,
		0x24, 0x4C, 0x03, 0xD2, 0x48, 0x03, 0xDA, 0xEB, 0x38, 0x42, 0x0F, 0xB7, 0x0C, 0x5B, 0x44, 0x8B,
		0x2C, 0x8E, 0x4C, 0x03, 0xEA, 0xEB, 0xD5, 0x48, 0x63, 0x42, 0x3C, 0x45, 0x33, 0xED, 0x8B, 0x8C,
		0x10, 0x88, 0x00, 0x00, 0x00, 0x48, 0x03, 0xCA, 0x44, 0x8B, 0x51, 0x20, 0x4C, 0x03, 0xD2, 0x0F,
		0x84, 0xB2, 0x00, 0x00, 0x00, 0x8B, 0x59, 0x24, 0x48, 0x03, 0xDA, 0x0F, 0x84, 0xA6, 0x00, 0x00,
		0x00, 0x8B, 0x71, 0x1C, 0x48, 0x03, 0xF2, 0x0F, 0x84, 0x9A, 0x00, 0x00, 0x00, 0x8B, 0x79, 0x14,
		0x45, 0x33, 0xDB, 0x85, 0xFF, 0x74, 0x62, 0x49, 0xBF, 0xE4, 0x2F, 0xCA, 0xB7, 0xE2, 0xBA, 0xB9,
		0x12, 0x0F, 0x1F, 0x40, 0x00, 0x66, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x45, 0x8B, 0x0A, 0x49, 0xB8, 0xBC, 0x22, 0x22, 0x84, 0xE4, 0x9C, 0xF2, 0xCB, 0x4C, 0x03, 0xCA,
		0x49, 0xBE, 0x4A, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x66, 0x0F, 0x1F, 0x44, 0x00, 0x00,
		0x49, 0x0F, 0xBE, 0x09, 0x4D, 0x8D, 0x49, 0x01, 0x4C, 0x33, 0xC1, 0x4D, 0x0F, 0xAF, 0xC6, 0x84,
		0xC9, 0x75, 0xED, 0x4C, 0x8B, 0x74, 0x24, 0x60, 0x4D, 0x3B, 0xC7, 0x74, 0x2C, 0x41, 0xFF, 0xC3,
		0x49, 0x83, 0xC2, 0x04, 0x44, 0x3B, 0xDF, 0x72, 0xB7, 0x45, 0x33, 0xE4, 0x48, 0x63, 0x42, 0x3C,
		0x8B, 0x8C, 0x10, 0x88, 0x00, 0x00, 0x00, 0x48, 0x03, 0xCA, 0x44, 0x8B, 0x51, 0x20, 0x8B, 0x59,
		0x24, 0x4C, 0x03, 0xD2, 0x48, 0x03, 0xDA, 0xEB, 0x30, 0x42, 0x0F, 0xB7, 0x0C, 0x5B, 0x44, 0x8B,
		0x24, 0x8E, 0x4C, 0x03, 0xE2, 0xEB, 0xD5, 0x48, 0x63, 0x42, 0x3C, 0x45, 0x33, 0xE4, 0x8B, 0x8C,
		0x10, 0x88, 0x00, 0x00, 0x00, 0x48, 0x03, 0xCA, 0x44, 0x8B, 0x51, 0x20, 0x4C, 0x03, 0xD2, 0x74,
		0x7C, 0x8B, 0x59, 0x24, 0x48, 0x03, 0xDA, 0x74, 0x74, 0x8B, 0x71, 0x1C, 0x48, 0x03, 0xF2, 0x74,
		0x6C, 0x8B, 0x79, 0x14, 0x45, 0x33, 0xDB, 0x85, 0xFF, 0x74, 0x62, 0x49, 0xBF, 0xE8, 0xE3, 0x25,
		0xED, 0x96, 0x0B, 0xDE, 0xBE, 0x66, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x45, 0x8B, 0x0A, 0x49, 0xB8, 0xBC, 0x22, 0x22, 0x84, 0xE4, 0x9C, 0xF2, 0xCB, 0x4C, 0x03, 0xCA,
		0x49, 0xBE, 0x4A, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x66, 0x0F, 0x1F, 0x44, 0x00, 0x00,
		0x49, 0x0F, 0xBE, 0x09, 0x4D, 0x8D, 0x49, 0x01, 0x4C, 0x33, 0xC1, 0x4D, 0x0F, 0xAF, 0xC6, 0x84,
		0xC9, 0x75, 0xED, 0x4C, 0x8B, 0x74, 0x24, 0x60, 0x4D, 0x3B, 0xC7, 0x0F, 0x84, 0xE2, 0x02, 0x00,
		0x00, 0x41, 0xFF, 0xC3, 0x49, 0x83, 0xC2, 0x04, 0x44, 0x3B, 0xDF, 0x72, 0xB3, 0x45, 0x33, 0xFF,
		0x48, 0x83, 0x7C, 0x24, 0x70, 0x00, 0x0F, 0x84, 0xE5, 0x02, 0x00, 0x00, 0x4D, 0x85, 0xF6, 0x0F,
		0x84, 0xDC, 0x02, 0x00, 0x00, 0x48, 0x83, 0x7C, 0x24, 0x78, 0x00, 0x0F, 0x84, 0xD0, 0x02, 0x00,
		0x00, 0x48, 0x83, 0x7C, 0x24, 0x30, 0x00, 0x0F, 0x84, 0xC4, 0x02, 0x00, 0x00, 0x48, 0x83, 0x7C,
		0x24, 0x38, 0x00, 0x0F, 0x84, 0xB8, 0x02, 0x00, 0x00, 0x48, 0x83, 0x7C, 0x24, 0x58, 0x00, 0x0F,
		0x84, 0xAC, 0x02, 0x00, 0x00, 0x48, 0x8B, 0x74, 0x24, 0x68, 0x48, 0x85, 0xF6, 0x0F, 0x84, 0x9E,
		0x02, 0x00, 0x00, 0x4C, 0x8B, 0x74, 0x24, 0x40, 0x4D, 0x85, 0xF6, 0x0F, 0x84, 0x90, 0x02, 0x00,
		0x00, 0x45, 0x33, 0xC0, 0x4C, 0x8D, 0x8D, 0xF8, 0x04, 0x00, 0x00, 0x40, 0x32, 0xFF, 0x48, 0x8D,
		0x95, 0xF8, 0x04, 0x00, 0x00, 0x40, 0x88, 0xBD, 0xE8, 0x04, 0x00, 0x00, 0x41, 0x8D, 0x48, 0x05,
		0x41, 0xFF, 0xD6, 0x33, 0xDB, 0x48, 0x89, 0x5D, 0x80, 0x3D, 0x04, 0x00, 0x00, 0xC0, 0x75, 0x59,
		0x48, 0x8B, 0x7C, 0x24, 0x58, 0x48, 0x85, 0xDB, 0x74, 0x0D, 0x33, 0xD2, 0x41, 0xB8, 0x00, 0x80,
		0x00, 0x00, 0x48, 0x8B, 0xCB, 0xFF, 0xD6, 0x8B, 0x95, 0xF8, 0x04, 0x00, 0x00, 0x33, 0xC9, 0x41,
		0xB8, 0x00, 0x10, 0x00, 0x00, 0x44, 0x8D, 0x49, 0x04, 0xFF, 0xD7, 0x44, 0x8B, 0x85, 0xF8, 0x04,
		0x00, 0x00, 0x4C, 0x8D, 0x8D, 0xF8, 0x04, 0x00, 0x00, 0x48, 0x8B, 0xD0, 0xB9, 0x05, 0x00, 0x00,
		0x00, 0x48, 0x8B, 0xD8, 0x41, 0xFF, 0xD6, 0x3D, 0x04, 0x00, 0x00, 0xC0, 0x74, 0xB7, 0x0F, 0xB6,
		0xBD, 0xE8, 0x04, 0x00, 0x00, 0x48, 0x89, 0x5D, 0x80, 0x85, 0xC0, 0x0F, 0x88, 0xF3, 0x01, 0x00,
		0x00, 0x83, 0x3B, 0x00, 0x48, 0x8B, 0xF3, 0x0F, 0x84, 0xAF, 0x01, 0x00, 0x00, 0x33, 0xDB, 0x44,
		0x8B, 0xF3, 0x0F, 0x1F, 0x40, 0x00, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x8B, 0x85, 0xE0, 0x04, 0x00, 0x00, 0x39, 0x46, 0x50, 0x0F, 0x85, 0x6F, 0x01, 0x00, 0x00, 0x83,
		0x7E, 0x04, 0x00, 0x8B, 0xFB, 0xC6, 0x85, 0xE8, 0x04, 0x00, 0x00, 0x01, 0x0F, 0x86, 0x5C, 0x01,
		0x00, 0x00, 0x8B, 0xC7, 0x48, 0x8D, 0x1C, 0x80, 0x48, 0x03, 0xDB, 0x83, 0xBC, 0xDE, 0x48, 0x01,
		0x00, 0x00, 0x05, 0x75, 0x4B, 0x41, 0xFF, 0xC6, 0x41, 0x83, 0xFE, 0x02, 0x72, 0x42, 0x4D, 0x85,
		0xE4, 0x74, 0x3D, 0x48, 0x8B, 0x44, 0x24, 0x48, 0x48, 0x85, 0xC0, 0x74, 0x33, 0x4C, 0x8D, 0x4B,
		0x25, 0xBA, 0x01, 0x00, 0x00, 0x00, 0x4E, 0x8D, 0x0C, 0xCE, 0x4C, 0x8D, 0x45, 0x90, 0x48, 0x8D,
		0x4D, 0x88, 0xFF, 0xD0, 0x85, 0xC0, 0x78, 0x18, 0x48, 0x8B, 0x4C, 0x24, 0x50, 0x33, 0xD2, 0x41,
		0xFF, 0xD4, 0x48, 0x8B, 0x4C, 0x24, 0x50, 0x48, 0x85, 0xC9, 0x74, 0x04, 0xFF, 0x54, 0x24, 0x30,
		0x4C, 0x8D, 0x4B, 0x25, 0xBA, 0x79, 0x00, 0x00, 0x00, 0x4E, 0x8D, 0x0C, 0xCE, 0x4C, 0x8D, 0x45,
		0x90, 0x48, 0x8D, 0x4C, 0x24, 0x50, 0xFF, 0x54, 0x24, 0x38, 0x33, 0xDB, 0x85, 0xC0, 0x0F, 0x88,
		0xCF, 0x00, 0x00, 0x00, 0xB9, 0x34, 0x01, 0x00, 0x00, 0x48, 0x8D, 0x85, 0x8C, 0x04, 0x00, 0x00,
		0x89, 0x18, 0x48, 0x8D, 0x40, 0xFC, 0x83, 0xC1, 0xFF, 0x75, 0xF5, 0x48, 0x8B, 0x4C, 0x24, 0x50,
		0x48, 0x8D, 0x55, 0xC0, 0xC7, 0x45, 0xF0, 0x10, 0x00, 0x10, 0x00, 0xFF, 0x54, 0x24, 0x70, 0x85,
		0xC0, 0x78, 0x3D, 0x48, 0x39, 0x5D, 0x08, 0x75, 0x12, 0x48, 0x39, 0x5D, 0x10, 0x75, 0x0C, 0x48,
		0x39, 0x5D, 0x18, 0x75, 0x06, 0x48, 0x39, 0x5D, 0x20, 0x74, 0x25, 0x48, 0x8B, 0x4C, 0x24, 0x50,
		0x48, 0x8D, 0x55, 0xC0, 0x48, 0x89, 0x5D, 0x08, 0x48, 0x89, 0x5D, 0x10, 0x48, 0x89, 0x5D, 0x18,
		0x48, 0x89, 0x5D, 0x20, 0x48, 0xC7, 0x45, 0x30, 0x55, 0x00, 0x00, 0x00, 0xFF, 0x54, 0x24, 0x60,
		0x48, 0x8B, 0x4C, 0x24, 0x50, 0x45, 0x33, 0xC9, 0x45, 0x33, 0xC0, 0x41, 0x8D, 0x51, 0x11, 0xFF,
		0x54, 0x24, 0x78, 0x85, 0xC0, 0x78, 0x3E, 0x4D, 0x85, 0xED, 0x74, 0x39, 0x4D, 0x85, 0xFF, 0x74,
		0x34, 0x48, 0x8B, 0x4C, 0x24, 0x50, 0x4C, 0x8D, 0x85, 0xF0, 0x04, 0x00, 0x00, 0x41, 0xB9, 0x01,
		0x00, 0x00, 0x00, 0x48, 0x89, 0x5C, 0x24, 0x20, 0x41, 0x8D, 0x51, 0x10, 0x41, 0xFF, 0xD5, 0x85,
		0xC0, 0x78, 0x12, 0x38, 0x9D, 0xF0, 0x04, 0x00, 0x00, 0x75, 0x0A, 0x48, 0x8B, 0x4C, 0x24, 0x50,
		0x33, 0xD2, 0x41, 0xFF, 0xD7, 0x48, 0x8B, 0x4C, 0x24, 0x50, 0x48, 0x85, 0xC9, 0x74, 0x04, 0xFF,
		0x54, 0x24, 0x30, 0xFF, 0xC7, 0x3B, 0x7E, 0x04, 0x0F, 0x82, 0xA4, 0xFE, 0xFF, 0xFF, 0x8B, 0x06,
		0x48, 0x03, 0xF0, 0x83, 0x3E, 0x00, 0x0F, 0x85, 0x74, 0xFE, 0xFF, 0xFF, 0x48, 0x8B, 0x5D, 0x80,
		0x0F, 0xB6, 0xBD, 0xE8, 0x04, 0x00, 0x00, 0x4C, 0x8B, 0x74, 0x24, 0x40, 0x48, 0x8B, 0x74, 0x24,
		0x68, 0x33, 0xD2, 0x41, 0xB8, 0x00, 0x80, 0x00, 0x00, 0x48, 0x8B, 0xCB, 0xFF, 0xD6, 0xC7, 0x85,
		0xF8, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x84, 0xFF, 0x0F, 0x85, 0x90, 0xFD, 0xFF,
		0xFF, 0xEB, 0x1E, 0x42, 0x0F, 0xB7, 0x0C, 0x5B, 0x44, 0x8B, 0x3C, 0x8E, 0x4C, 0x03, 0xFA, 0xE9,
		0x1C, 0xFD, 0xFF, 0xFF, 0x33, 0xD2, 0x41, 0xB8, 0x00, 0x80, 0x00, 0x00, 0x48, 0x8B, 0xCB, 0xFF,
		0xD6, 0x32, 0xC0, 0x48, 0x81, 0xC4, 0x98, 0x05, 0x00, 0x00, 0x41, 0x5F, 0x41, 0x5E, 0x41, 0x5D,
		0x41, 0x5C, 0x5F, 0x5E, 0x5B, 0x5D, 0xC3
		};

		uint8_t protect_process_32[] =
		{
		0x55, 0x8B, 0xEC, 0x81, 0xEC, 0x44, 0x03, 0x00, 0x00, 0x53, 0x8B, 0xC1, 0xC6, 0x45, 0xE7, 0x00,
		0x89, 0x45, 0xAC, 0x0F, 0x57, 0xC0, 0xC7, 0x45, 0xBC, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x45, 0xDC,
		0x00, 0x00, 0x00, 0x00, 0xC7, 0x45, 0xA8, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x45, 0x90, 0x18, 0x00,
		0x00, 0x00, 0xC7, 0x45, 0xA4, 0x00, 0x00, 0x00, 0x00, 0x56, 0x57, 0x0F, 0x11, 0x45, 0x94, 0x85,
		0xC0, 0x0F, 0x84, 0xFE, 0x0A, 0x00, 0x00, 0x64, 0xA1, 0x30, 0x00, 0x00, 0x00, 0x8B, 0x48, 0x0C,
		0x8B, 0x41, 0x18, 0x83, 0xC1, 0x14, 0x89, 0x4D, 0xFC, 0x89, 0x45, 0xB4, 0x8B, 0x39, 0x3B, 0xF9,
		0x74, 0x40, 0x8B, 0xC7, 0x8B, 0x50, 0x28, 0x8D, 0x58, 0xF8, 0x85, 0xD2, 0x74, 0x22, 0xBE, 0x5D,
		0x9D, 0x1C, 0x81, 0x0F, 0xB7, 0x0A, 0x8D, 0x52, 0x02, 0x8B, 0xC1, 0x33, 0xC6, 0x69, 0xF0, 0x2B,
		0x01, 0x00, 0x01, 0x66, 0x85, 0xC9, 0x75, 0xEB, 0x81, 0xFE, 0x01, 0xEE, 0xE7, 0x8C, 0x74, 0x14,
		0x8B, 0x4F, 0x04, 0x8B, 0x3F, 0x8B, 0xC7, 0x89, 0x4D, 0xB4, 0x89, 0x4D, 0xB4, 0x3B, 0x45, 0xFC,
		0x75, 0xC2, 0x33, 0xDB, 0x64, 0xA1, 0x30, 0x00, 0x00, 0x00, 0x8B, 0x73, 0x18, 0x89, 0x75, 0xE8,
		0x8B, 0x48, 0x0C, 0x8B, 0x41, 0x18, 0x83, 0xC1, 0x14, 0x89, 0x4D, 0xFC, 0x89, 0x45, 0xB4, 0x8B,
		0x39, 0x3B, 0xF9, 0x0F, 0x84, 0x91, 0x00, 0x00, 0x00, 0x8B, 0xC7, 0x0F, 0x1F, 0x44, 0x00, 0x00,
		0x8B, 0x50, 0x28, 0x8D, 0x58, 0xF8, 0x85, 0xD2, 0x74, 0x23, 0xBE, 0x5D, 0x9D, 0x1C, 0x81, 0x90,
		0x0F, 0xB7, 0x0A, 0x8D, 0x52, 0x02, 0x8B, 0xC1, 0x33, 0xC6, 0x69, 0xF0, 0x2B, 0x01, 0x00, 0x01,
		0x66, 0x85, 0xC9, 0x75, 0xEB, 0x81, 0xFE, 0x29, 0xFC, 0x64, 0x75, 0x74, 0x14, 0x8B, 0x4F, 0x04,
		0x8B, 0x3F, 0x8B, 0xC7, 0x89, 0x4D, 0xB4, 0x89, 0x4D, 0xB4, 0x3B, 0x45, 0xFC, 0x75, 0xC1, 0x33,
		0xDB, 0x8B, 0x75, 0xE8, 0x8B, 0x7B, 0x18, 0x85, 0xFF, 0x0F, 0x84, 0x26, 0x0A, 0x00, 0x00, 0x85,
		0xF6, 0x0F, 0x84, 0x1E, 0x0A, 0x00, 0x00, 0x0F, 0xB7, 0x07, 0x8B, 0xC8, 0x89, 0x4D, 0xD0, 0xB9,
		0x4D, 0x5A, 0x00, 0x00, 0x66, 0x3B, 0xC1, 0x74, 0x25, 0x8D, 0x47, 0x3C, 0xC7, 0x45, 0xD8, 0x00,
		0x00, 0x00, 0x00, 0x89, 0x45, 0xF0, 0x33, 0xC0, 0xC7, 0x45, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x89,
		0x45, 0xC0, 0x89, 0x45, 0xD4, 0xE9, 0x19, 0x02, 0x00, 0x00, 0x33, 0xDB, 0xEB, 0xB6, 0x8B, 0x47,
		0x3C, 0x8D, 0x57, 0x3C, 0x81, 0x3C, 0x38, 0x50, 0x45, 0x00, 0x00, 0x74, 0x0F, 0xC7, 0x45, 0xD8,
		0x00, 0x00, 0x00, 0x00, 0x89, 0x55, 0xF0, 0xE9, 0xF0, 0x00, 0x00, 0x00, 0x8B, 0x44, 0x38, 0x78,
		0x03, 0xC7, 0x74, 0x68, 0x8B, 0x48, 0x20, 0x03, 0xCF, 0x89, 0x4D, 0xF8, 0x74, 0x5E, 0x8B, 0x58,
		0x24, 0x03, 0xDF, 0x89, 0x5D, 0xF4, 0x74, 0x54, 0x8B, 0x58, 0x1C, 0x03, 0xDF, 0x89, 0x5D, 0xEC,
		0x74, 0x4A, 0x8B, 0x40, 0x14, 0x33, 0xDB, 0x89, 0x45, 0xFC, 0x85, 0xC0, 0x74, 0x3E, 0x66, 0x90,
		0x8B, 0x14, 0x99, 0xBE, 0x5D, 0x9D, 0x1C, 0x81, 0x03, 0xD7, 0x66, 0x0F, 0x1F, 0x44, 0x00, 0x00,
		0x8A, 0x0A, 0x8D, 0x52, 0x01, 0x0F, 0xBE, 0xC1, 0x33, 0xC6, 0x69, 0xF0, 0x2B, 0x01, 0x00, 0x01,
		0x84, 0xC9, 0x75, 0xEC, 0x81, 0xFE, 0x4F, 0x62, 0xA4, 0xDA, 0x0F, 0x84, 0x47, 0x08, 0x00, 0x00,
		0x8B, 0x4D, 0xF8, 0x43, 0x3B, 0x5D, 0xFC, 0x72, 0xC7, 0x8D, 0x57, 0x3C, 0xC7, 0x45, 0xD8, 0x00,
		0x00, 0x00, 0x00, 0x89, 0x55, 0xF0, 0x8B, 0x02, 0x03, 0xC7, 0x8B, 0x40, 0x78, 0x03, 0xC7, 0x74,
		0x6B, 0x8B, 0x48, 0x20, 0x03, 0xCF, 0x89, 0x4D, 0xF8, 0x74, 0x5E, 0x8B, 0x50, 0x24, 0x03, 0xD7,
		0x89, 0x55, 0xF4, 0x74, 0x54, 0x8B, 0x50, 0x1C, 0x03, 0xD7, 0x89, 0x55, 0xEC, 0x74, 0x4A, 0x8B,
		0x40, 0x14, 0x33, 0xDB, 0x89, 0x45, 0xFC, 0x85, 0xC0, 0x74, 0x3E, 0x0F, 0x1F, 0x44, 0x00, 0x00,
		0x8B, 0x14, 0x99, 0xBE, 0x5D, 0x9D, 0x1C, 0x81, 0x03, 0xD7, 0x66, 0x0F, 0x1F, 0x44, 0x00, 0x00,
		0x8A, 0x0A, 0x8D, 0x52, 0x01, 0x0F, 0xBE, 0xC1, 0x33, 0xC6, 0x69, 0xF0, 0x2B, 0x01, 0x00, 0x01,
		0x84, 0xC9, 0x75, 0xEC, 0x81, 0xFE, 0x99, 0x04, 0x15, 0xF4, 0x0F, 0x84, 0xE6, 0x07, 0x00, 0x00,
		0x8B, 0x4D, 0xF8, 0x43, 0x3B, 0x5D, 0xFC, 0x72, 0xC7, 0x8B, 0x55, 0xF0, 0xC7, 0x45, 0xC8, 0x00,
		0x00, 0x00, 0x00, 0x8B, 0x02, 0x81, 0x3C, 0x38, 0x50, 0x45, 0x00, 0x00, 0x75, 0x6B, 0x8B, 0x44,
		0x38, 0x78, 0x03, 0xC7, 0x74, 0x63, 0x8B, 0x48, 0x20, 0x03, 0xCF, 0x89, 0x4D, 0xF8, 0x74, 0x59,
		0x8B, 0x50, 0x24, 0x03, 0xD7, 0x89, 0x55, 0xF4, 0x74, 0x4F, 0x8B, 0x50, 0x1C, 0x03, 0xD7, 0x89,
		0x55, 0xEC, 0x74, 0x45, 0x8B, 0x40, 0x14, 0x33, 0xDB, 0x89, 0x45, 0xFC, 0x85, 0xC0, 0x74, 0x39,
		0x8B, 0x14, 0x99, 0xBE, 0x5D, 0x9D, 0x1C, 0x81, 0x03, 0xD7, 0x66, 0x0F, 0x1F, 0x44, 0x00, 0x00,
		0x8A, 0x0A, 0x8D, 0x52, 0x01, 0x0F, 0xBE, 0xC1, 0x33, 0xC6, 0x69, 0xF0, 0x2B, 0x01, 0x00, 0x01,
		0x84, 0xC9, 0x75, 0xEC, 0x81, 0xFE, 0x10, 0x35, 0xDF, 0x48, 0x0F, 0x84, 0x80, 0x07, 0x00, 0x00,
		0x8B, 0x4D, 0xF8, 0x43, 0x3B, 0x5D, 0xFC, 0x72, 0xC7, 0x33, 0xC0, 0x89, 0x45, 0xC0, 0x8B, 0x45,
		0xF0, 0x8B, 0x00, 0x81, 0x3C, 0x38, 0x50, 0x45, 0x00, 0x00, 0x75, 0x6D, 0x8B, 0x44, 0x38, 0x78,
		0x03, 0xC7, 0x74, 0x65, 0x8B, 0x48, 0x20, 0x03, 0xCF, 0x89, 0x4D, 0xF8, 0x74, 0x5B, 0x8B, 0x50,
		0x24, 0x03, 0xD7, 0x89, 0x55, 0xF4, 0x74, 0x51, 0x8B, 0x50, 0x1C, 0x03, 0xD7, 0x89, 0x55, 0xEC,
		0x74, 0x47, 0x8B, 0x40, 0x14, 0x33, 0xDB, 0x89, 0x45, 0xFC, 0x85, 0xC0, 0x74, 0x3B, 0x66, 0x90,
		0x8B, 0x14, 0x99, 0xBE, 0x5D, 0x9D, 0x1C, 0x81, 0x03, 0xD7, 0x66, 0x0F, 0x1F, 0x44, 0x00, 0x00,
		0x8A, 0x0A, 0x8D, 0x52, 0x01, 0x0F, 0xBE, 0xC1, 0x33, 0xC6, 0x69, 0xF0, 0x2B, 0x01, 0x00, 0x01,
		0x84, 0xC9, 0x75, 0xEC, 0x81, 0xFE, 0x7E, 0xB9, 0xD7, 0x32, 0x0F, 0x84, 0x14, 0x07, 0x00, 0x00,
		0x8B, 0x4D, 0xF8, 0x43, 0x3B, 0x5D, 0xFC, 0x72, 0xC7, 0xC7, 0x45, 0xD4, 0x00, 0x00, 0x00, 0x00,
		0x8B, 0x75, 0xE8, 0x0F, 0xB7, 0x06, 0x8B, 0xC8, 0x89, 0x4D, 0xCC, 0xB9, 0x4D, 0x5A, 0x00, 0x00,
		0x66, 0x3B, 0xC1, 0x75, 0x77, 0x8B, 0x46, 0x3C, 0x81, 0x3C, 0x30, 0x50, 0x45, 0x00, 0x00, 0x75,
		0x6B, 0x8B, 0x44, 0x30, 0x78, 0x03, 0xC6, 0x74, 0x63, 0x8B, 0x48, 0x20, 0x03, 0xCE, 0x89, 0x4D,
		0xF8, 0x74, 0x59, 0x8B, 0x50, 0x24, 0x03, 0xD6, 0x89, 0x55, 0xF4, 0x74, 0x4F, 0x8B, 0x50, 0x1C,
		0x03, 0xD6, 0x89, 0x55, 0xEC, 0x74, 0x45, 0x8B, 0x40, 0x14, 0x33, 0xDB, 0x89, 0x45, 0xFC, 0x85,
		0xC0, 0x74, 0x39, 0x8B, 0x14, 0x99, 0x03, 0xD6, 0xBE, 0x5D, 0x9D, 0x1C, 0x81, 0x0F, 0x1F, 0x00,
		0x8A, 0x0A, 0x8D, 0x52, 0x01, 0x0F, 0xBE, 0xC1, 0x33, 0xC6, 0x69, 0xF0, 0x2B, 0x01, 0x00, 0x01,
		0x84, 0xC9, 0x75, 0xEC, 0x81, 0xFE, 0x53, 0x51, 0x68, 0x69, 0x8B, 0x75, 0xE8, 0x0F, 0x84, 0x98,
		0x06, 0x00, 0x00, 0x8B, 0x4D, 0xF8, 0x43, 0x3B, 0x5D, 0xFC, 0x72, 0xC7, 0x33, 0xC0, 0xBA, 0x4D,
		0x5A, 0x00, 0x00, 0x89, 0x45, 0xC4, 0xB9, 0x3C, 0x00, 0x00, 0x00, 0x8B, 0xC6, 0x66, 0x39, 0x55,
		0xCC, 0x75, 0x79, 0x8B, 0x04, 0x08, 0x81, 0x3C, 0x30, 0x50, 0x45, 0x00, 0x00, 0x75, 0x6D, 0x8B,
		0x44, 0x30, 0x78, 0x03, 0xC6, 0x74, 0x65, 0x8B, 0x48, 0x20, 0x03, 0xCE, 0x89, 0x4D, 0xF8, 0x74,
		0x5B, 0x8B, 0x50, 0x24, 0x03, 0xD6, 0x89, 0x55, 0xF4, 0x74, 0x51, 0x8B, 0x50, 0x1C, 0x03, 0xD6,
		0x89, 0x55, 0xEC, 0x74, 0x47, 0x8B, 0x40, 0x14, 0x33, 0xDB, 0x89, 0x45, 0xFC, 0x85, 0xC0, 0x74,
		0x3B, 0x8B, 0x14, 0x99, 0x03, 0xD6, 0xBE, 0x5D, 0x9D, 0x1C, 0x81, 0x0F, 0x1F, 0x44, 0x00, 0x00,
		0x8A, 0x0A, 0x8D, 0x52, 0x01, 0x0F, 0xBE, 0xC1, 0x33, 0xC6, 0x69, 0xF0, 0x2B, 0x01, 0x00, 0x01,
		0x84, 0xC9, 0x75, 0xEC, 0x81, 0xFE, 0xF6, 0x48, 0x00, 0xAF, 0x0F, 0x84, 0x1F, 0x06, 0x00, 0x00,
		0x8B, 0x4D, 0xF8, 0x43, 0x8B, 0x75, 0xE8, 0x3B, 0x5D, 0xFC, 0x72, 0xC5, 0x33, 0xD2, 0x89, 0x55,
		0xE8, 0xB8, 0x4D, 0x5A, 0x00, 0x00, 0x66, 0x39, 0x45, 0xD0, 0x0F, 0x85, 0xA5, 0x06, 0x00, 0x00,
		0x8B, 0x45, 0xF0, 0x8B, 0x00, 0x81, 0x3C, 0x38, 0x50, 0x45, 0x00, 0x00, 0x75, 0x6B, 0x8B, 0x44,
		0x38, 0x78, 0x03, 0xC7, 0x74, 0x63, 0x8B, 0x48, 0x20, 0x03, 0xCF, 0x89, 0x4D, 0xF8, 0x74, 0x59,
		0x8B, 0x50, 0x24, 0x03, 0xD7, 0x89, 0x55, 0xF4, 0x74, 0x4F, 0x8B, 0x50, 0x1C, 0x03, 0xD7, 0x89,
		0x55, 0xEC, 0x74, 0x45, 0x8B, 0x40, 0x14, 0x33, 0xDB, 0x89, 0x45, 0xFC, 0x85, 0xC0, 0x74, 0x39,
		0x8B, 0x14, 0x99, 0xBE, 0x5D, 0x9D, 0x1C, 0x81, 0x03, 0xD7, 0x66, 0x0F, 0x1F, 0x44, 0x00, 0x00,
		0x8A, 0x0A, 0x8D, 0x52, 0x01, 0x0F, 0xBE, 0xC1, 0x33, 0xC6, 0x69, 0xF0, 0x2B, 0x01, 0x00, 0x01,
		0x84, 0xC9, 0x75, 0xEC, 0x81, 0xFE, 0x58, 0x45, 0x9E, 0x80, 0x0F, 0x84, 0xA4, 0x05, 0x00, 0x00,
		0x8B, 0x4D, 0xF8, 0x43, 0x3B, 0x5D, 0xFC, 0x72, 0xC7, 0xC7, 0x45, 0xD0, 0x00, 0x00, 0x00, 0x00,
		0x8B, 0x45, 0xF0, 0x8B, 0x00, 0x81, 0x3C, 0x38, 0x50, 0x45, 0x00, 0x00, 0x75, 0x6B, 0x8B, 0x44,
		0x38, 0x78, 0x03, 0xC7, 0x74, 0x63, 0x8B, 0x48, 0x20, 0x03, 0xCF, 0x89, 0x4D, 0xF8, 0x74, 0x59,
		0x8B, 0x50, 0x24, 0x03, 0xD7, 0x89, 0x55, 0xF4, 0x74, 0x4F, 0x8B, 0x50, 0x1C, 0x03, 0xD7, 0x89,
		0x55, 0xEC, 0x74, 0x45, 0x8B, 0x40, 0x14, 0x33, 0xDB, 0x89, 0x45, 0xFC, 0x85, 0xC0, 0x74, 0x39,
		0x8B, 0x14, 0x99, 0xBE, 0x5D, 0x9D, 0x1C, 0x81, 0x03, 0xD7, 0x66, 0x0F, 0x1F, 0x44, 0x00, 0x00,
		0x8A, 0x0A, 0x8D, 0x52, 0x01, 0x0F, 0xBE, 0xC1, 0x33, 0xC6, 0x69, 0xF0, 0x2B, 0x01, 0x00, 0x01,
		0x84, 0xC9, 0x75, 0xEC, 0x81, 0xFE, 0x54, 0xD5, 0x45, 0x44, 0x0F, 0x84, 0x3B, 0x05, 0x00, 0x00,
		0x8B, 0x4D, 0xF8, 0x43, 0x3B, 0x5D, 0xFC, 0x72, 0xC7, 0xC7, 0x45, 0xCC, 0x00, 0x00, 0x00, 0x00,
		0x8B, 0x45, 0xF0, 0x8B, 0x00, 0x81, 0x3C, 0x38, 0x50, 0x45, 0x00, 0x00, 0x0F, 0x85, 0x67, 0x00,
		0x00, 0x00, 0x8B, 0x44, 0x38, 0x78, 0x03, 0xC7, 0x74, 0x5F, 0x8B, 0x48, 0x20, 0x03, 0xCF, 0x89,
		0x4D, 0xF8, 0x74, 0x55, 0x8B, 0x50, 0x24, 0x03, 0xD7, 0x89, 0x55, 0xF4, 0x74, 0x4B, 0x8B, 0x50,
		0x1C, 0x03, 0xD7, 0x89, 0x55, 0xEC, 0x74, 0x41, 0x8B, 0x40, 0x14, 0x33, 0xDB, 0x89, 0x45, 0xFC,
		0x85, 0xC0, 0x74, 0x35, 0x8B, 0x14, 0x99, 0xBE, 0x5D, 0x9D, 0x1C, 0x81, 0x03, 0xD7, 0x66, 0x90,
		0x8A, 0x0A, 0x8D, 0x52, 0x01, 0x0F, 0xBE, 0xC1, 0x33, 0xC6, 0x69, 0xF0, 0x2B, 0x01, 0x00, 0x01,
		0x84, 0xC9, 0x75, 0xEC, 0x81, 0xFE, 0x2B, 0x71, 0x07, 0x97, 0x0F, 0x84, 0xD2, 0x04, 0x00, 0x00,
		0x8B, 0x4D, 0xF8, 0x43, 0x3B, 0x5D, 0xFC, 0x72, 0xCB, 0xC7, 0x45, 0xEC, 0x00, 0x00, 0x00, 0x00,
		0x8B, 0x45, 0xF0, 0x8B, 0x00, 0x81, 0x3C, 0x38, 0x50, 0x45, 0x00, 0x00, 0x0F, 0x85, 0x77, 0x00,
		0x00, 0x00, 0x8B, 0x44, 0x38, 0x78, 0x03, 0xC7, 0x0F, 0x84, 0x6B, 0x00, 0x00, 0x00, 0x8B, 0x48,
		0x20, 0x03, 0xCF, 0x89, 0x4D, 0xF8, 0x74, 0x61, 0x8B, 0x50, 0x24, 0x03, 0xD7, 0x89, 0x55, 0xF4,
		0x74, 0x57, 0x8B, 0x50, 0x1C, 0x03, 0xD7, 0x89, 0x55, 0xE0, 0x74, 0x4D, 0x8B, 0x40, 0x14, 0x33,
		0xDB, 0x89, 0x45, 0xFC, 0x85, 0xC0, 0x74, 0x41, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x8B, 0x14, 0x99, 0xBE, 0x5D, 0x9D, 0x1C, 0x81, 0x03, 0xD7, 0x66, 0x0F, 0x1F, 0x44, 0x00, 0x00,
		0x8A, 0x0A, 0x8D, 0x52, 0x01, 0x0F, 0xBE, 0xC1, 0x33, 0xC6, 0x69, 0xF0, 0x2B, 0x01, 0x00, 0x01,
		0x84, 0xC9, 0x75, 0xEC, 0x81, 0xFE, 0x5B, 0xC8, 0x97, 0x9F, 0x0F, 0x84, 0x59, 0x04, 0x00, 0x00,
		0x8B, 0x4D, 0xF8, 0x43, 0x3B, 0x5D, 0xFC, 0x72, 0xC7, 0x33, 0xC0, 0x89, 0x45, 0xF4, 0x8B, 0x45,
		0xF0, 0x8B, 0x00, 0x81, 0x3C, 0x38, 0x50, 0x45, 0x00, 0x00, 0x0F, 0x85, 0x69, 0x00, 0x00, 0x00,
		0x8B, 0x44, 0x38, 0x78, 0x03, 0xC7, 0x74, 0x61, 0x8B, 0x48, 0x20, 0x03, 0xCF, 0x89, 0x4D, 0xF8,
		0x74, 0x57, 0x8B, 0x50, 0x24, 0x03, 0xD7, 0x89, 0x55, 0xE0, 0x74, 0x4D, 0x8B, 0x50, 0x1C, 0x03,
		0xD7, 0x89, 0x55, 0xB4, 0x74, 0x43, 0x8B, 0x40, 0x14, 0x33, 0xDB, 0x89, 0x45, 0xFC, 0x85, 0xC0,
		0x74, 0x37, 0x8B, 0x14, 0x99, 0xBE, 0x5D, 0x9D, 0x1C, 0x81, 0x03, 0xD7, 0x0F, 0x1F, 0x40, 0x00,
		0x8A, 0x0A, 0x8D, 0x52, 0x01, 0x0F, 0xBE, 0xC1, 0x33, 0xC6, 0x69, 0xF0, 0x2B, 0x01, 0x00, 0x01,
		0x84, 0xC9, 0x75, 0xEC, 0x81, 0xFE, 0xED, 0xC1, 0x68, 0xB1, 0x0F, 0x84, 0xED, 0x03, 0x00, 0x00,
		0x8B, 0x4D, 0xF8, 0x43, 0x3B, 0x5D, 0xFC, 0x72, 0xC9, 0xC7, 0x45, 0xE0, 0x00, 0x00, 0x00, 0x00,
		0x8B, 0x45, 0xF0, 0x8B, 0x00, 0x03, 0xC7, 0x81, 0x38, 0x50, 0x45, 0x00, 0x00, 0x0F, 0x85, 0x76,
		0x00, 0x00, 0x00, 0x8B, 0x40, 0x78, 0x03, 0xC7, 0x0F, 0x84, 0x6B, 0x00, 0x00, 0x00, 0x8B, 0x48,
		0x20, 0x03, 0xCF, 0x89, 0x4D, 0xFC, 0x74, 0x61, 0x8B, 0x50, 0x24, 0x03, 0xD7, 0x89, 0x55, 0xF8,
		0x74, 0x57, 0x8B, 0x50, 0x1C, 0x03, 0xD7, 0x89, 0x55, 0xF0, 0x74, 0x4D, 0x8B, 0x40, 0x14, 0x33,
		0xDB, 0x89, 0x45, 0xB4, 0x85, 0xC0, 0x74, 0x41, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x8B, 0x14, 0x99, 0xBE, 0x5D, 0x9D, 0x1C, 0x81, 0x03, 0xD7, 0x66, 0x0F, 0x1F, 0x44, 0x00, 0x00,
		0x8A, 0x0A, 0x8D, 0x52, 0x01, 0x0F, 0xBE, 0xC1, 0x33, 0xC6, 0x69, 0xF0, 0x2B, 0x01, 0x00, 0x01,
		0x84, 0xC9, 0x75, 0xEC, 0x81, 0xFE, 0x5A, 0x7F, 0x15, 0xB4, 0x0F, 0x84, 0x74, 0x03, 0x00, 0x00,
		0x8B, 0x4D, 0xFC, 0x43, 0x3B, 0x5D, 0xB4, 0x72, 0xC7, 0xC7, 0x45, 0xF0, 0x00, 0x00, 0x00, 0x00,
		0x83, 0x7D, 0xD0, 0x00, 0x0F, 0x84, 0x7B, 0x03, 0x00, 0x00, 0x83, 0x7D, 0xCC, 0x00, 0x0F, 0x84,
		0x71, 0x03, 0x00, 0x00, 0x83, 0x7D, 0xEC, 0x00, 0x0F, 0x84, 0x67, 0x03, 0x00, 0x00, 0x83, 0x7D,
		0xD8, 0x00, 0x0F, 0x84, 0x5D, 0x03, 0x00, 0x00, 0x83, 0x7D, 0xC8, 0x00, 0x0F, 0x84, 0x53, 0x03,
		0x00, 0x00, 0x8B, 0x7D, 0xC4, 0x85, 0xFF, 0x0F, 0x84, 0x48, 0x03, 0x00, 0x00, 0x8B, 0x75, 0xE8,
		0x85, 0xF6, 0x0F, 0x84, 0x3D, 0x03, 0x00, 0x00, 0x8B, 0x45, 0xD4, 0x85, 0xC0, 0x0F, 0x84, 0x32,
		0x03, 0x00, 0x00, 0x8D, 0x4D, 0xBC, 0xC6, 0x45, 0xE6, 0x00, 0x51, 0x6A, 0x00, 0x51, 0x6A, 0x05,
		0xFF, 0xD0, 0x33, 0xDB, 0x89, 0x5D, 0xFC, 0x3D, 0x04, 0x00, 0x00, 0xC0, 0x75, 0x37, 0x66, 0x90,
		0x85, 0xDB, 0x74, 0x0A, 0x68, 0x00, 0x80, 0x00, 0x00, 0x6A, 0x00, 0x53, 0xFF, 0xD6, 0x6A, 0x04,
		0x68, 0x00, 0x10, 0x00, 0x00, 0xFF, 0x75, 0xBC, 0x6A, 0x00, 0xFF, 0xD7, 0x8B, 0xD8, 0x8D, 0x45,
		0xBC, 0x50, 0xFF, 0x75, 0xBC, 0x53, 0x6A, 0x05, 0xFF, 0x55, 0xD4, 0x3D, 0x04, 0x00, 0x00, 0xC0,
		0x74, 0xCE, 0x89, 0x5D, 0xFC, 0x85, 0xC0, 0x0F, 0x88, 0xCE, 0x02, 0x00, 0x00, 0x83, 0x3B, 0x00,
		0x8B, 0xFB, 0x0F, 0x84, 0x85, 0x01, 0x00, 0x00, 0x8B, 0x4D, 0xAC, 0x33, 0xC0, 0x89, 0x45, 0xF8,
		0x39, 0x4F, 0x44, 0x0F, 0x85, 0x63, 0x01, 0x00, 0x00, 0x33, 0xDB, 0xC6, 0x45, 0xE6, 0x01, 0x39,
		0x5F, 0x04, 0x0F, 0x86, 0x54, 0x01, 0x00, 0x00, 0x8D, 0xB7, 0xD8, 0x00, 0x00, 0x00, 0x66, 0x90,
		0x83, 0x7E, 0x18, 0x05, 0x75, 0x3A, 0x40, 0x89, 0x45, 0xF8, 0x83, 0xF8, 0x02, 0x72, 0x31, 0x83,
		0x7D, 0xE0, 0x00, 0x74, 0x2B, 0x8B, 0x45, 0xC0, 0x85, 0xC0, 0x74, 0x24, 0x56, 0x8D, 0x4D, 0x90,
		0x51, 0x6A, 0x01, 0x8D, 0x4D, 0xA8, 0x51, 0xFF, 0xD0, 0x85, 0xC0, 0x78, 0x13, 0x6A, 0x00, 0xFF,
		0x75, 0xDC, 0xFF, 0x55, 0xE0, 0x8B, 0x45, 0xDC, 0x85, 0xC0, 0x74, 0x04, 0x50, 0xFF, 0x55, 0xD8,
		0x56, 0x8D, 0x45, 0x90, 0x50, 0x6A, 0x79, 0x8D, 0x45, 0xDC, 0x50, 0xFF, 0x55, 0xC8, 0x85, 0xC0,
		0x0F, 0x88, 0xE3, 0x00, 0x00, 0x00, 0xB9, 0xB3, 0x00, 0x00, 0x00, 0x8D, 0x45, 0x88, 0x66, 0x90,
		0xC7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8D, 0x40, 0xFC, 0x83, 0xE9, 0x01, 0x75, 0xF2, 0x8D, 0x85,
		0xC0, 0xFC, 0xFF, 0xFF, 0xC7, 0x85, 0xC0, 0xFC, 0xFF, 0xFF, 0x10, 0x00, 0x01, 0x00, 0x50, 0xFF,
		0x75, 0xDC, 0xFF, 0x55, 0xD0, 0x85, 0xC0, 0x0F, 0x88, 0x63, 0x00, 0x00, 0x00, 0x83, 0xBD, 0xC4,
		0xFC, 0xFF, 0xFF, 0x00, 0x75, 0x1B, 0x83, 0xBD, 0xC8, 0xFC, 0xFF, 0xFF, 0x00, 0x75, 0x12, 0x83,
		0xBD, 0xCC, 0xFC, 0xFF, 0xFF, 0x00, 0x75, 0x09, 0x83, 0xBD, 0xD0, 0xFC, 0xFF, 0xFF, 0x00, 0x74,
		0x3F, 0x8D, 0x85, 0xC0, 0xFC, 0xFF, 0xFF, 0xC7, 0x85, 0xC4, 0xFC, 0xFF, 0xFF, 0x00, 0x00, 0x00,
		0x00, 0x50, 0xFF, 0x75, 0xDC, 0xC7, 0x85, 0xC8, 0xFC, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xC7,
		0x85, 0xCC, 0xFC, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x85, 0xD0, 0xFC, 0xFF, 0xFF, 0x00,
		0x00, 0x00, 0x00, 0xC7, 0x85, 0xD8, 0xFC, 0xFF, 0xFF, 0x55, 0x00, 0x00, 0x00, 0xFF, 0x55, 0xCC,
		0x6A, 0x00, 0x6A, 0x00, 0x6A, 0x11, 0xFF, 0x75, 0xDC, 0xFF, 0x55, 0xEC, 0x85, 0xC0, 0x78, 0x2E,
		0x8B, 0x45, 0xF4, 0x85, 0xC0, 0x74, 0x27, 0x83, 0x7D, 0xF0, 0x00, 0x74, 0x21, 0x6A, 0x00, 0x6A,
		0x01, 0x8D, 0x4D, 0xE7, 0x51, 0x6A, 0x11, 0xFF, 0x75, 0xDC, 0xFF, 0xD0, 0x85, 0xC0, 0x78, 0x0E,
		0x80, 0x7D, 0xE7, 0x00, 0x75, 0x08, 0x6A, 0x00, 0xFF, 0x75, 0xDC, 0xFF, 0x55, 0xF0, 0x8B, 0x45,
		0xDC, 0x85, 0xC0, 0x74, 0x04, 0x50, 0xFF, 0x55, 0xD8, 0x8B, 0x45, 0xF8, 0x43, 0x83, 0xC6, 0x40,
		0x3B, 0x5F, 0x04, 0x0F, 0x82, 0xB7, 0xFE, 0xFF, 0xFF, 0x8B, 0x4D, 0xAC, 0x03, 0x3F, 0x83, 0x3F,
		0x00, 0x0F, 0x85, 0x89, 0xFE, 0xFF, 0xFF, 0x8B, 0x5D, 0xFC, 0x8B, 0x75, 0xE8, 0x68, 0x00, 0x80,
		0x00, 0x00, 0x6A, 0x00, 0x53, 0xFF, 0xD6, 0x80, 0x7D, 0xE6, 0x00, 0x8B, 0x7D, 0xC4, 0x8B, 0x45,
		0xD4, 0xC7, 0x45, 0xBC, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x85, 0xF5, 0xFD, 0xFF, 0xFF, 0x32, 0xC0,
		0x5F, 0x5E, 0x5B, 0x8B, 0xE5, 0x5D, 0xC3, 0x8B, 0x45, 0xF4, 0x8B, 0x4D, 0xEC, 0x0F, 0xB7, 0x04,
		0x58, 0x8B, 0x0C, 0x81, 0x8D, 0x47, 0x3C, 0x03, 0xCF, 0x89, 0x45, 0xF0, 0x89, 0x4D, 0xD8, 0x8B,
		0xD0, 0xE9, 0xB0, 0xF7, 0xFF, 0xFF, 0x8B, 0x45, 0xF4, 0x8B, 0x4D, 0xEC, 0x8B, 0x55, 0xF0, 0x0F,
		0xB7, 0x04, 0x58, 0x8B, 0x0C, 0x81, 0x03, 0xCF, 0x89, 0x4D, 0xC8, 0xE9, 0x13, 0xF8, 0xFF, 0xFF,
		0x8B, 0x45, 0xF4, 0x8B, 0x4D, 0xEC, 0x0F, 0xB7, 0x04, 0x58, 0x8B, 0x04, 0x81, 0x03, 0xC7, 0xE9,
		0x77, 0xF8, 0xFF, 0xFF, 0x8B, 0x45, 0xF4, 0x8B, 0x4D, 0xEC, 0x0F, 0xB7, 0x04, 0x58, 0x8B, 0x14,
		0x81, 0x03, 0xD7, 0x89, 0x55, 0xD4, 0xE9, 0xE5, 0xF8, 0xFF, 0xFF, 0x8B, 0x45, 0xF4, 0x8B, 0x4D,
		0xEC, 0x0F, 0xB7, 0x04, 0x58, 0x8B, 0x04, 0x81, 0x03, 0xC6, 0xE9, 0x5F, 0xF9, 0xFF, 0xFF, 0x8B,
		0x45, 0xF4, 0x8B, 0x4D, 0xEC, 0x0F, 0xB7, 0x04, 0x58, 0x8B, 0x14, 0x81, 0x01, 0x55, 0xE8, 0xE9,
		0xDD, 0xF9, 0xFF, 0xFF, 0x8B, 0x45, 0xF4, 0x8B, 0x4D, 0xEC, 0x0F, 0xB7, 0x04, 0x58, 0x8B, 0x0C,
		0x81, 0x03, 0xCF, 0x89, 0x4D, 0xD0, 0xE9, 0x55, 0xFA, 0xFF, 0xFF, 0x8B, 0x45, 0xF4, 0x8B, 0x4D,
		0xEC, 0x0F, 0xB7, 0x04, 0x58, 0x8B, 0x0C, 0x81, 0x03, 0xCF, 0x89, 0x4D, 0xCC, 0xE9, 0xBE, 0xFA,
		0xFF, 0xFF, 0x8B, 0x45, 0xF4, 0x8B, 0x4D, 0xEC, 0x0F, 0xB7, 0x04, 0x58, 0x8B, 0x0C, 0x81, 0x03,
		0xCF, 0x89, 0x4D, 0xEC, 0xE9, 0x27, 0xFB, 0xFF, 0xFF, 0x8B, 0x45, 0xF4, 0x8B, 0x4D, 0xE0, 0x0F,
		0xB7, 0x04, 0x58, 0x8B, 0x04, 0x81, 0x03, 0xC7, 0xE9, 0x9E, 0xFB, 0xFF, 0xFF, 0x8B, 0x45, 0xE0,
		0x8B, 0x4D, 0xB4, 0x0F, 0xB7, 0x04, 0x58, 0x8B, 0x0C, 0x81, 0x03, 0xCF, 0x89, 0x4D, 0xE0, 0xE9,
		0x0C, 0xFC, 0xFF, 0xFF, 0x8B, 0x45, 0xF8, 0x8B, 0x4D, 0xF0, 0x0F, 0xB7, 0x04, 0x58, 0x8B, 0x04,
		0x81, 0x03, 0xC7, 0x89, 0x45, 0xF0, 0xE9, 0x85, 0xFC, 0xFF, 0xFF, 0x68, 0x00, 0x80, 0x00, 0x00,
		0x6A, 0x00, 0x53, 0xFF, 0xD6, 0x5F, 0x5E, 0x32, 0xC0, 0x5B, 0x8B, 0xE5, 0x5D, 0xC3
		};
	}

	namespace crt_wrapper
	{
		namespace get_proc_info
		{
			INT status_process = NULL;
#if defined(__clang__)

			ALLOCATE_TEXT uint8_t get_process_info[] =
			{
				0x66, 0x8C, 0xC8, //mov ax, cs
				0xC3 //ret
			};
#endif // !__clang__

			INLINE  auto get_process_platform() -> INT
			{ 
				SYSTEM_INFO sys_inf;
#if defined(__clang__)
				if (status_process)
				{
					return status_process;
				}
				auto proc = reinterpret_cast<BYTE(__cdecl*)()>(get_proc_info::get_process_info)();
				status_process = proc;
				if (proc == CS_64)
				{
					status_process = PROCESS_64;
				}
				else if (proc == CS_WOW)
				{
					status_process = PROCESS_WOW64;
				}
				else if (proc == CS_32)
				{
					status_process = PROCESS_32;
				}
				else
				{
					status_process = PROCESS_UNK;
				}
#else

#ifdef _WIN64
				status_process = PROCESS_64;
#else  
				LI_FN(GetNativeSystemInfo).forwarded_cached()(&sys_inf);
				if (sys_inf.wProcessorArchitecture == PROCESSOR_ARCHITECTURE_AMD64 ||
					sys_inf.wProcessorArchitecture == PROCESSOR_ARCHITECTURE_IA64)
				{
					status_process = PROCESS_WOW64;
				}
				else if (sys_inf.wProcessorArchitecture = PROCESSOR_ARCHITECTURE_INTEL)
				{
					status_process = PROCESS_32;
				}
				else if (sys_inf.wProcessorArchitecture == PROCESSOR_ARCHITECTURE_UNKNOWN)
				{
					status_process = PROCESS_UNK;
				}
#endif // _WIN64

#endif // !__clang__
				return status_process;
			}
		}
		  
		INLINE auto malloc(size_t size) -> PVOID
		{
			return VirtualAlloc(NULL, size, MEM_COMMIT, PAGE_READWRITE);
		}

		INLINE auto free(PVOID ptr) -> VOID
		{
			if (nullptr != ptr)
				VirtualFree(ptr, NULL, MEM_RELEASE);
		}

		INLINE auto wtolower(INT c) -> INT
		{
			if (c >= L'A' && c <= L'Z') return c - L'A' + L'a';
			return c;
		} 

		INLINE auto wstricmp(CONST WCHAR* cs, CONST WCHAR* ct) -> INT
		{
			if (cs && ct)
			{
				while (wtolower(*cs) == wtolower(*ct))
				{
					if (*cs == NULL && *ct == NULL) return NULL;
					if (*cs == NULL || *ct == NULL) break;
					cs++;
					ct++;
				}
				return wtolower(*cs) - wtolower(*ct);
			}
			return -1;
		}
		 
		 
	}
	INLINE auto get_process_exp(PVOID nt_query_system_information) -> uint32_t
	{
		ULONG ret_lenght = NULL;
		uint32_t process_id = NULL;
		NTSTATUS nt_status = STATUS_UNSUCCESSFUL;
		PVOID buffer = NULL;
		PSYSTEM_PROCESS_INFORMATION process_info = NULL;

		nt_status = reinterpret_cast<decltype(&NtQuerySystemInformation)>(nt_query_system_information)(SystemProcessInformation, &ret_lenght, ret_lenght, &ret_lenght);

		while (nt_status == STATUS_INFO_LENGTH_MISMATCH)
		{
			if (buffer != NULL)
				crt_wrapper::free(buffer);

			buffer = crt_wrapper::malloc(ret_lenght);
			nt_status = reinterpret_cast<decltype(&NtQuerySystemInformation)>(nt_query_system_information)(SystemProcessInformation, buffer, ret_lenght, &ret_lenght);
		}

		if (!NT_SUCCESS(nt_status))
		{
			crt_wrapper::free(buffer);
			return NULL;
		}

		process_info = reinterpret_cast<PSYSTEM_PROCESS_INFORMATION>(buffer);
		while (process_info->NextEntryOffset) // Loop over the list until we reach the last entry.
		{

			if (crt_wrapper::wstricmp(process_info->ImageName.Buffer, L"explorer.exe") == NULL)
			{
				process_id = reinterpret_cast<uint32_t>(process_info->UniqueProcessId);
				break;
			}
			process_info = (PSYSTEM_PROCESS_INFORMATION)((LPBYTE)process_info + process_info->NextEntryOffset); // Calculate the address of the next entry.
		}
		crt_wrapper::free(buffer);
		return process_id;

	}


	INLINE auto protect_process() -> bool
	{
		bool is_start_thread = FALSE;
		INT inf_proc = NULL;
		INT is_wow_64 = NULL;
		INT is_write_correct = NULL;
		uint32_t pid_explorer = NULL;
		uint64_t is_detect = FALSE;
		CONTEXT ctx = { NULL };
		HANDLE proc_oper = NULL;
		HANDLE thread_handle = NULL;
		HANDLE thread_access_handle = NULL;
		LPVOID allocate_shell = NULL;

		PVOID nt_query_system_information = reinterpret_cast<PVOID>(LI_FN(NtQuerySystemInformation).nt_cached());
		PVOID nt_close = reinterpret_cast<PVOID>(LI_FN(NtClose).nt_cached());

		pid_explorer = (uint32_t)get_process_exp(nt_query_system_information);
		if (!pid_explorer)
			return is_start_thread;
		proc_oper = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_OPERATION | PROCESS_VM_READ | PROCESS_VM_WRITE | PROCESS_CREATE_THREAD, FALSE, pid_explorer);
		if (proc_oper)
		{
			allocate_shell = VirtualAllocEx(proc_oper, NULL, sizeof(shell_code::protect_process_64) + sizeof(shell_code::protect_process_32), MEM_COMMIT, PAGE_EXECUTE_READWRITE);
			if (allocate_shell)
			{
				inf_proc = crt_wrapper::get_proc_info::get_process_platform();
				IsWow64Process(proc_oper, &is_wow_64);

#ifndef _WIN64
				if (inf_proc == PROCESS_32) //x32 system
					is_write_correct = WriteProcessMemory(proc_oper, allocate_shell, shell_code::protect_process_32, sizeof(shell_code::protect_process_32), NULL);
				else if (is_wow_64 || inf_proc == PROCESS_WOW64)
					std::cout << "Not support WoW64\n"; //Not correct send parameter CreateRemoteThread(call x64 code under WoW64)
				else
					std::cout << "Unknown platform!\n";
#else
				if (!is_wow_64)
					is_write_correct = WriteProcessMemory(proc_oper, allocate_shell, shell_code::protect_process_64, sizeof(shell_code::protect_process_64), NULL);
#endif // !_WIN64
				if (is_write_correct)
				{
					thread_handle = CreateRemoteThread(proc_oper, NULL, 0x1000, reinterpret_cast<LPTHREAD_START_ROUTINE>(allocate_shell), (LPVOID)NtCurrentTeb()->ClientId.UniqueProcess, NULL, NULL);
					 
					if (thread_handle)
					{
						is_start_thread = TRUE;
						reinterpret_cast<decltype(&NtClose)>(nt_close)(thread_handle);
					}
				}
			}
			reinterpret_cast<decltype(&NtClose)>(nt_close)(proc_oper);
		}
		return is_start_thread;
	}



}
#endif // !REMOTE_PROTECT
